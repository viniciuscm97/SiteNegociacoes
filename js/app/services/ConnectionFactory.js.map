{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","dbName","version","close","connection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","ObjectStoreNames","contains","store","DeleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,SAAS,YAAf;AACA,QAAMC,UAAU,CAAhB;;AAEA,QAAIC,QAAQ,IAAZ;AACA,QAAIC,aAAa,IAAjB;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAmB;AAClC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BC,OAA9B,CAAlB;;AAEAO,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACd,UAAL,EAAgB;AACZA,yCAAaW,EAAEC,MAAF,CAASC,MAAtB;AACAd,oCAAQC,WAAWD,KAAX,CAAiBgB,IAAjB,CAAsBf,UAAtB,CAAR;AACA;AACAA,uCAAWD,KAAX,GAAmB,YAAY;AAC3B,sCAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQH,UAAR;AACH,qBAXD;;AAaAK,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAzBM,CAAP;AA0BH;AAjCL;AAAA;AAAA,0CAmCyBpB,UAnCzB,EAmCoC;AAC5BJ,uBAAOyB,OAAP,CAAe,iBAAQ;AACnB,wBAAGrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIxB,WAAWyB,iBAAX,CAA6BD,KAA7B;;AAEJxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAe,IAAhB,EAAnC;AACH,iBALD;AAOH;AA3CL;AAAA;AAAA,8CA6C4B;AACpB,oBAAG3B,UAAH,EAAc;;AAEVD;AACAC,iCAAa,IAAb;AACH;AACJ;AAnDL;;AAAA;AAAA;AAsDH,CA/DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n\r\n    const stores = ['negociacoes']\r\n    const dbName = 'aluraframe'\r\n    const version = 3\r\n\r\n    var close = null\r\n    var connection = null\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error(\"Não é possivel instanciar a classe ConnectionFactory\")\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve,reject) =>{\r\n                let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result)\r\n                                \r\n                }\r\n                \r\n                openRequest.onsuccess = e => {\r\n                    if (!connection){\r\n                        connection = e.target.result\r\n                        close = connection.close.bind(connection)\r\n                        // monkey patch\r\n                        connection.close = function () {\r\n                            throw new Error(\"Você não pode fechar a conexão pelo método close\")\r\n                        }\r\n                    }\r\n\r\n                    resolve(connection)\r\n                }\r\n                \r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                }\r\n            })\r\n        }\r\n        \r\n        static _createStores(connection){\r\n            stores.forEach(store =>{\r\n                if(connection.ObjectStoreNames.contains(store))\r\n                    connection.DeleteObjectStore(store)\r\n                \r\n                connection.createObjectStore(store,{autoIncrement: true})\r\n            })\r\n            \r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                \r\n                close()\r\n                connection = null\r\n            }\r\n        }\r\n    }\r\n\r\n})()"]}