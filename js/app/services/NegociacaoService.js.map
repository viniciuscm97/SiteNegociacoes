{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Factory","createNegociacao","Date","e","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","todasNegociacoes","reduce","arrayAchatado","arrayAtual","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","item"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor(){\r\n        this._http = new HttpService()\r\n    }\r\n    \r\n    obterNegociacoesDaSemana(){\r\n\r\n        return this._http.get('negociacoes/semana')\r\n            .then(negociacoes =>  negociacoes.map(e => Factory.createNegociacao(null,{\r\n                'date':new Date(e.data),\r\n                'quantidade':e.quantidade,\r\n                'valor':e.valor})))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error(\"Não foi possivel importar negociações da semana\")\r\n            })\r\n        \r\n    }\r\n    obterNegociacoesDaSemanaAnterior(){\r\n\r\n        return this._http.get('negociacoes/anterior')\r\n            .then(negociacoes =>  negociacoes.map(e => Factory.createNegociacao(null,{\r\n                'date':new Date(e.data),\r\n                'quantidade':e.quantidade,\r\n                'valor':e.valor})))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error( \"Não foi possivel obter as negociações da semana anterior\")\r\n            })\r\n\r\n                 \r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada(){\r\n\r\n        return this._http.get('negociacoes/retrasada')\r\n            .then(negociacoes => negociacoes.map(e => Factory.createNegociacao(null,{\r\n                'date':new Date(e.data),\r\n                'quantidade':e.quantidade,\r\n                'valor':e.valor})))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error( \"Não foi possivel obter as negociações da semana retrasada\")\r\n            })\r\n               \r\n    }\r\n\r\n    obterNegociacoes(){\r\n        return Promise.all(\r\n            [this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()])\r\n            .then( negociacoes => {\r\n                let todasNegociacoes = negociacoes.reduce((arrayAchatado,arrayAtual) => arrayAchatado.concat(arrayAtual), [])\r\n                return todasNegociacoes})\r\n            .catch( erro => {throw new Error(erro)})\r\n    }\r\n\r\n    cadastra(negociacao){        \r\n            \r\n            return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao adicionada com sucesso')      \r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possivel adicionar a negociação')\r\n            })\r\n        \r\n    }\r\n\r\n    lista(){\r\n\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.listaTodos())\r\n        .catch(erro => {\r\n            console.log(erro)\r\n            throw new Error(\"Não foi possível importar as negociações\")\r\n        }) \r\n        \r\n    }\r\n\r\n    apaga(){\r\n        \r\n        return ConnectionFactory.getConnection()\r\n        .then( connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.apagaTodos())\r\n        .catch(erro => {\r\n            console.log(erro)\r\n            throw new Error(\"Não foi possível apagar as negociações\")\r\n        })\r\n        \r\n    }\r\n\r\n    importa(listaAtual){\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao => \r\n                    !listaAtual.some( item => negociacao.isEquals(item))))                \r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error(\"Não foi possível apagar as negociações\")\r\n            })\r\n    }\r\n\r\n}"]}